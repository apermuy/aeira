<?php

use \Drupal\node\Entity\Node;
use \Drupal\taxonomy\Entity\Term;
use \Drupal\Core\Language\Language;
use \Drupal\Core\Controller\ControllerBase;
use \Symfony\Component\DependencyInjection\ContainerInterface;
use \Drupal\Core\Extension\ModuleHandlerInterface;

/**
 * @file
 * Install, update and uninstall functions for aeira install profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function aeira_install() {
  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();

  // 
  // Tipos de contido
  // 
  // Elemento
  $type = \Drupal\node\Entity\NodeType::create([
    'type' => 'elemento',
    'name' => 'Elemento',
    'description' => 'Tipo de contido para crear elementos que se amosarán no catálogo',
  ]);
  
  $type->save();

  $values = array(
    'targetEntityType' => 'node',
    'bundle' => 'elemento',
    'mode' => 'default',
    'status' => TRUE,
  );
  \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->create($values);

  // Páxina
  $type = \Drupal\node\Entity\NodeType::create([
    'type' => 'paxina',
    'name' => 'Páxina',
    'description' => 'Tipo de contido para crear páxinas básicas',

  ]);
  
  $type->save();

  $values = array(
    'targetEntityType' => 'node',
    'bundle' => 'paxina',
    'mode' => 'default',
    'status' => TRUE,
  );
  \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->create($values);

  // Formato de texto full_html
  
  $name = 'filter.format.full';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));
  
  // Editor de texto full

  $name = 'editor.editor.full';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));

  //
  // Campos
  //

  // Xeolocalizacion
  \Drupal\field\Entity\FieldStorageConfig::create(array(
    'field_name' => 'field_xeolocalizacion_elemento',
    'entity_type' => 'node',
    'type' => 'geofield',
    'cardinality' => 1,
  ))->save();

  \Drupal\field\Entity\FieldConfig::create([
    'field_name' => 'field_xeolocalizacion_elemento',
    'entity_type' => 'node',
    'bundle' => 'elemento',
    'label' => 'Xeolocalización',
  ])->save();

  $entityDisplayRepository = \Drupal::service('entity_display.repository');
  $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_xeolocalizacion_elemento', ['type' => 'geofield_latlon']);
  $form_display->save();

  // Lugar
  \Drupal\field\Entity\FieldStorageConfig::create(array(
    'field_name' => 'field_lugar_elemento',
    'entity_type' => 'node',
    'type' => 'text',
    'cardinality' => 1,
  ))->save();

  \Drupal\field\Entity\FieldConfig::create([
    'field_name' => 'field_lugar_elemento',
    'entity_type' => 'node',
    'bundle' => 'elemento',
    'label' => 'Lugar',
  ])->save();

  $entityDisplayRepository = \Drupal::service('entity_display.repository');
  $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_lugar_elemento', ['type' => 'text_textfield']);
  $form_display->save();

  // Código
  \Drupal\field\Entity\FieldStorageConfig::create(array(
    'field_name' => 'field_codigo_elemento',
    'entity_type' => 'node',
    'type' => 'text',
    'cardinality' => 1,
  ))->save();

  \Drupal\field\Entity\FieldConfig::create([
    'field_name' => 'field_codigo_elemento',
    'entity_type' => 'node',
    'bundle' => 'elemento',
    'label' => 'Código',
  ])->save();

  $entityDisplayRepository = \Drupal::service('entity_display.repository');
  $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_codigo_elemento', ['type' => 'text_textfield']);
  $form_display->save();

  // Descrición
  \Drupal\field\Entity\FieldStorageConfig::create(array(
    'field_name' => 'field_descricion_elemento',
    'entity_type' => 'node',
    'type' => 'text_long',
    'format' => 'full_html',
    'cardinality' => 1,
  ))->save();

  \Drupal\field\Entity\FieldConfig::create([
    'field_name' => 'field_descricion_elemento',
    'entity_type' => 'node',
    'bundle' => 'elemento',
    'label' => 'Descrición',
  ])->save();

  $entityDisplayRepository = \Drupal::service('entity_display.repository');
  $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_descricion_elemento', ['type' => 'text_textarea']);
  $form_display->save();

  //
  // Imaxe
  //

  \Drupal\field\Entity\FieldStorageConfig::create([
    'field_name' => 'field_imaxe_elemento',
    'entity_type' => 'node',
    'type' => 'image',
    'translatable' => '0',
  ])->save();

  \Drupal\field\Entity\FieldConfig::create([
    'label' => 'Imaxe',
    'description' => 'Imaxe principal do elemento',
    'field_name' => 'field_imaxe_elemento',
    'entity_type' => 'node',
    'bundle' => 'elemento',
    'required' => 0,
  ])->save();

  $entityDisplayRepository = \Drupal::service('entity_display.repository');
  $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_imaxe_elemento', ['type' => 'image_image']);
  $form_display->save();

  // Contido páxina
    \Drupal\field\Entity\FieldStorageConfig::create(array(
      'field_name' => 'field_contido_paxina',
      'entity_type' => 'node',
      'type' => 'text_with_summary',
      'format' => 'full',
      'cardinality' => 1,
    ))->save();
  
    \Drupal\field\Entity\FieldConfig::create([
      'field_name' => 'field_contido_paxina',
      'entity_type' => 'node',
      'bundle' => 'paxina',
      'label' => 'Contido',
    ])->save();
  
    $entityDisplayRepository = \Drupal::service('entity_display.repository');
    $form_display = $entityDisplayRepository->getFormDisplay('node', 'paxina')->setComponent('field_contido_paxina', ['type' => 'text_textarea']);
    $form_display->save();

  // 
  // Vocabularios taxonómicos
  //

  // Tipo de elemento

  $vid = "tipo";
  $name = "Tipo de elemento";
  $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();

  if (!isset($vocabularies[$vid])) {
    $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create(array(
          'vid' => $vid,
          'description' => 'Vocabulario taxonómico que almacena distintos tipos de elemento do proxecto',
          'name' => $name,
    ));
    $vocabulary->save();
  }
  else {
    // Vocabulary Already exist
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', $vid);
    $tids = $query->execute();
  }

  // Engadir termos ó vocabulario
  $vocabularioTipo = 'tipo';
  $categoriasTipo = ['Igrexa', 'Pazo', 'Hórreo', 'Mirador'];
  foreach ($categoriasTipo as $terminoTipo) {
    $termTipo = Term::create(array(
      'parent' => array(),
      'name' => $terminoTipo,
      'vid' => $vocabularioTipo,
    ))->save();
  }

  // Parroquia

  $vid = "parroquia";
  $name = "Parroquia";
  $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();

  if (!isset($vocabularies[$vid])) {
    $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create(array(
          'vid' => $vid,
          'description' => 'Vocabulario taxonómico que identifica á Parroquia',
          'name' => $name,
    ));
    $vocabulary->save();
  }
  else {
    // Vocabulary Already exist
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', $vid);
    $tids = $query->execute();
  }


  // Concello

  $vid = "concello";
  $name = "Concello";
  $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();
  
  if (!isset($vocabularies[$vid])) {
    $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create(array(
            'vid' => $vid,
            'description' => 'Vocabulario taxonómico que identifica ó Concello',
            'name' => $name,
    ));
    $vocabulary->save();
  }
    else {
      $query = \Drupal::entityQuery('taxonomy_term');
      $query->condition('vid', $vid);
      $tids = $query->execute();
  }

  // Engadir termos ó vocabulario Concello
  $vocabularioConcello = 'concello';
  $categoriasConcello = ['Ares', 'Fene', 'Ferrol', 'Mugardos', 'Narón', 'Valdoviño'];
  foreach ($categoriasConcello as $termoConcello) {
    $termosConcello = Term::create(array(
      'parent' => array(),
      'name' => $termoConcello,
      'vid' => $vocabularioConcello,
     ))->save();
  }

  // Acceso

  $vid = "acceso";
  $name = "Acceso";
  $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();
  
  if (!isset($vocabularies[$vid])) {
    $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create(array(
            'vid' => $vid,
            'description' => 'Vocabulario taxonómico que identifica o tipo de acceso ó elemento',
            'name' => $name,
    ));
    $vocabulary->save();
  }
    else {
      $query = \Drupal::entityQuery('taxonomy_term');
      $query->condition('vid', $vid);
      $tids = $query->execute();
  }

    // Engadir termos ó vocabulario acceso
    $vocabularioAcceso = 'acceso';
    $categoriasAcceso = ['Bo', 'Moi bo', 'Malo', 'Sen clasificar'];
    foreach ($categoriasAcceso as $termoAcceso) {
      $termosAcceso = Term::create(array(
        'parent' => array(),
        'name' => $termoAcceso,
        'vid' => $vocabularioAcceso,
      ))->save();
    }

  //
  // Entity_reference
  // 

  // Campo parroquia 
    \Drupal\field\Entity\FieldStorageConfig::create(array(
      'field_name' => 'field_parroquia_elemento',
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'settings' => array(
        'target_type' => 'taxonomy_term',
      ),
    ))->save();
  
    \Drupal\field\Entity\FieldConfig::create(array(
      'field_name' => 'field_parroquia_elemento',
      'entity_type' => 'node',
      'bundle' => 'elemento',
      'label' => 'Parroquia',
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array(
            'parroquia' => 'parroquia',
          ),
          'auto_create' => TRUE,
        ),
      ),
    ))->save();
  
    $entityDisplayRepository = \Drupal::service('entity_display.repository');
    $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_parroquia_elemento', ['type' => 'entity_reference_autocomplete_tags']);
    $form_display->save();

  // Campo acceso
    \Drupal\field\Entity\FieldStorageConfig::create(array(
      'field_name' => 'field_acceso_elemento',
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'settings' => array(
        'target_type' => 'taxonomy_term',
      ),
    ))->save();

    \Drupal\field\Entity\FieldConfig::create(array(
      'field_name' => 'field_acceso_elemento',
      'entity_type' => 'node',
      'bundle' => 'elemento',
      'label' => 'Acceso',
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array(
            'acceso' => 'acceso',
          ),
          'auto_create' => TRUE,
        ),
      ),
    ))->save();

    $entityDisplayRepository = \Drupal::service('entity_display.repository');
    $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_acceso_elemento', ['type' => 'entity_reference_autocomplete_tags']);
    $form_display->save();

  // Campo tipo
  \Drupal\field\Entity\FieldStorageConfig::create(array(
    'field_name' => 'field_tipo_elemento',
    'entity_type' => 'node',
    'type' => 'entity_reference',
    'settings' => array(
      'target_type' => 'taxonomy_term',
    ),
  ))->save();

  \Drupal\field\Entity\FieldConfig::create(array(
    'field_name' => 'field_tipo_elemento',
    'entity_type' => 'node',
    'bundle' => 'elemento',
    'label' => 'Tipo de elemento',
    'settings' => array(
      'handler_settings' => array(
        'target_bundles' => array(
          'tipo' => 'tipo',
        ),
        'auto_create' => TRUE,
      ),
    ),
  ))->save();


  $entityDisplayRepository = \Drupal::service('entity_display.repository');
  $form_display = $entityDisplayRepository->getFormDisplay('node', 'elemento')->setComponent('field_tipo_elemento', ['type' => 'entity_reference_autocomplete_tags']);
  $form_display->save();

   // Concello a Parroquia
        \Drupal\field\Entity\FieldStorageConfig::create(array(
          'field_name' => 'field_parroquia_concello',
          'entity_type' => 'taxonomy_term',
          'type' => 'entity_reference',
          'settings' => array(
            'target_type' => 'taxonomy_term',
          ),
        ))->save();
      
        \Drupal\field\Entity\FieldConfig::create(array(
          'field_name' => 'field_parroquia_concello',
          'entity_type' => 'taxonomy_term',
          'bundle' => 'parroquia',
          'label' => 'Concello',
          'settings' => array(
            'handler_settings' => array(
              'target_bundles' => array(
                'concello' => 'concello',
              ),
              'auto_create' => TRUE,
            ),
          ),
        ))->save();
      
        $entityDisplayRepository = \Drupal::service('entity_display.repository');
        $form_display = $entityDisplayRepository->getFormDisplay('taxonomy_term', 'parroquia')->setComponent('field_parroquia_concello', ['type' => 'entity_reference_autocomplete_tags']);
        $form_display->save();    

  // Formulario de contacto
  $feedback_form = \Drupal\contact\Entity\ContactForm::create([
    'id' => 'contacto',
    'label' => 'Contacto',
    'recipients' => ['usuaria@exemplo.com'],
    'reply' => '',
    'canonical' => 'contactar',
    'redirect' => '',
    'weight' => 0,
    ]);
  $feedback_form->save();

  //
  // Importar configuración
  //

  //Displays

  // Importar display node elementos full
  $name = 'core.entity_view_display.node.elemento.full';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));

  // Importar display node elementos resumen
  $name = 'core.entity_view_display.node.elemento.teaser';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));
 
  // Importar display node elementos tarxeta
  $tarxeta = 'core.entity_view_display.node.elemento.tarxeta';
  $config_path1 = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage1 = new \Drupal\Core\Config\FileStorage($config_path1);
  $config_storage1 = \Drupal::service('config.storage');
  $config_storage1->write($tarxeta, $storage1->read($tarxeta));

  // Importar display node paxina full
  $tarxeta = 'core.entity_view_display.node.paxina.full';
  $config_path1 = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage1 = new \Drupal\Core\Config\FileStorage($config_path1);
  $config_storage1 = \Drupal::service('config.storage');
  $config_storage1->write($tarxeta, $storage1->read($tarxeta));
  
  // Views
  
  // Importar vista /elementos
  $name = 'views.view.elementos';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));

  // Importar vista elementos relacionados
  $name = 'views.view.elementos_relacionados';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));

  //
  // Bloques
  //

  // Importar bloque vista elementos relacionados
  $name = 'block.block.views_block__elementos_relacionados';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));

  //
  // Pathauto
  //

  // Importar patron URL para content type elementos
  $name = 'pathauto.pattern.elemento';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));

  // Importar patron URL para content type paxina
  $name = 'pathauto.pattern.paxinas';
  $config_path = drupal_get_path('profile', 'aeira') . '/config/optional';
  $storage = new \Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $storage->read($name));


  //
  // Importar contenido demo elementos en formato geoJSON
  //
  $demoFilePath = drupal_get_path('profile', 'aeira') . '/content/elementos_demo.json';
  $arquivoDemoElementos = file_get_contents($demoFilePath);
  $demoElementos = json_decode($arquivoDemoElementos, true);
  array_shift($demoElementos);  
  
  foreach($demoElementos as $element => $key){
    foreach($key as $value => $data) {
     
     $lon = $data["geometry"]["coordinates"][0];
     $lat = $data["geometry"]["coordinates"][1];
 
     $node = Node::create(['type' => 'elemento']);
     $node->set('title',$data["properties"]["title"]);
     $node->set('field_tipo_elemento', $data["properties"]["tid"]);
     $node->set('uid', 1);
     $node->set('langcode', 'gl');
     $node->status = 1;
 
     $node->enforceIsNew();
     $node->save();
 
     $nid = $node->id();
     $node1 = Node::load($nid);
     $coord = [$lon,$lat];
     $point =  Drupal::service('geofield.wkt_generator')->WktBuildPoint($coord);
     $node1->set('field_xeolocalizacion_elemento',$point);  
     $node1->save();   

    }
  } 

  //
  // Menu
  //
  $menu = \Drupal::entityTypeManager()->getStorage('menu_link_content')
    ->loadByProperties(['menu_name' => 'main']);
  foreach ($menu as $menu_item) {
    $parent_id = $menu_item->getParentId();
    if (!empty($parent_id)) {
      $top_level = $parent_id;
      break;
    }
  }
  $menu_link = \Drupal\menu_link_content\Entity\MenuLinkContent::create([
    'title' => 'Elementos',
    'link' => ['uri' => 'internal:/elementos'],
    'menu_name' => 'main',
    'parent' => $top_level,
    'expanded' => TRUE,
    'weight' => 0,
  ]);
  $menu_link->save();

  $menu_link = \Drupal\menu_link_content\Entity\MenuLinkContent::create([
    'title' => 'Mapa',
    'link' => ['uri' => 'internal:/mapa'],
    'menu_name' => 'main',
    'parent' => $top_level,
    'expanded' => TRUE,
    'weight' => 3,
  ]);
  $menu_link->save();

  $menu_link = \Drupal\menu_link_content\Entity\MenuLinkContent::create([
    'title' => 'Contacto',
    'link' => ['uri' => 'internal:/contact/contacto'],
    'menu_name' => 'main',
    'parent' => $top_level,
    'expanded' => TRUE,
    'weight' => 5,
  ]);
  $menu_link->save();
} 